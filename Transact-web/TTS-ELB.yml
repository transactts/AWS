AWSTemplateFormatVersion: 2010-09-09
Description: This template deploys ELB for TTS-Web

Parameters:
  VPC:
    Description: VPC ID of your existing Virtual Private Cloud (VPC) where you want to deploy transact stack.
    Type: AWS::EC2::VPC::Id

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0

  PrivateSubnet1:
    Description: Private Subnet1
    Type: AWS::EC2::Subnet::Id

  PrivateSubnet2:
    Description: Private Subnet2
    Type: AWS::EC2::Subnet::Id

  PublicSubnet1:
    Description: Public Subnet1
    Type: AWS::EC2::Subnet::Id
  
  PublicSubnet2:
    Description: Public Subnet2
    Type: AWS::EC2::Subnet::Id

  SSLCertificateARN:
    Description: Provide ARN of the SSL certificate imported in AWS Certificate Manager.
    Type: AWS::CertificateManager::Certificate

  ELBScheme:
    Description: Choose load balancer scheme. Default is 'internet-facing'.
    Type: String
    Default: internet-facing
    AllowedValues:
    - internet-facing
    - internal

Resources:
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
      - Key: access_logs.s3.enabled
        Value: 'false'
      - Key: idle_timeout.timeout_seconds
        Value: '180'
      - Key: deletion_protection.enabled
        Value: 'false'
      - Key: routing.http2.enabled
        Value: 'true'
      - Key: routing.http.drop_invalid_header_fields.enabled
        Value: 'false'
      Scheme:
        Ref: ELBScheme
      SecurityGroups:
      - Ref: ELBSecurityGroup
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - FixedResponseConfig:
          ContentType: text/plain
          MessageBody: Default rule reached
          StatusCode: '200'
        Order: 1
        Type: fixed-response
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Certificates:
      - CertificateArn:
          Ref: SSLCertificateARN
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Order: 1
        RedirectConfig:
          Host: "#{host}"
          Path: "/#{path}"
          Port: '443'
          Protocol: HTTPS
          Query: "#{query}"
          StatusCode: HTTP_301
        Type: redirect
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  MyTargetGroups:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Name: TTS-ELB-TG
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
      
Outputs:
  ApplicationLoadBalancer:
    Description: A reference to the created ApplicationLoadBalancer
    Value: !Ref ApplicationLoadBalancer
